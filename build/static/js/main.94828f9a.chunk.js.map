{"version":3,"sources":["component/full-screen/index.tsx","App.tsx","store/actionType.ts","store/reducer.ts","store/index.ts","index.tsx"],"names":["Fullscreen","videoUrl","defaultStyle","width","height","fullStyle","with","state","iframeStyle","fullScreen","setState","element","document","querySelector","requestFullscreen","className","src","this","allowFullScreen","FullscreenOutlined","style","cursor","onClick","React","Component","App","REDUX_TEST","REDUX_TEST1","defaultState","reducer","action","newState","JSON","parse","stringify","type","value","store","createStore","ReactDOM","render","StrictMode","stroe","getElementById"],"mappings":"sSAGaA,EAAb,4MACIC,SAAW,yBADf,EAIIC,aAAe,CACXC,MAAO,OACPC,OAAQ,SANhB,EAQIC,UARJ,2BASW,EAAKH,cAThB,IAUQI,KAAM,OACNF,OAAQ,SAXhB,EAaIG,MAAQ,CACJC,YAAa,EAAKN,cAd1B,EAiBIO,WAAa,WACT,EAAKC,SAAS,CAAEF,YAAa,EAAKH,YAClC,IAAMM,EAAUC,SAASC,cAAc,cACnCF,GACAA,EAAQG,qBArBpB,uDAEI,cAFJ,oBAwBI,WACI,OAAO,qCACH,qBAAKC,UAAU,YAAf,SACI,gDAAQC,IAAKC,KAAKhB,UAAcgB,KAAKV,MAAMC,aAA3C,IACIU,iBAAe,OAIvB,8BACI,cAACC,EAAA,EAAD,CAAoBC,MAAO,CAAEC,OAAQ,WACjCC,QAASL,KAAKR,sBAlClC,GAAgCc,IAAMC,WC8BvBC,I,EAAAA,EAnBf,WACE,OACE,sBAAKV,UAAU,MAAf,UACE,wBAAQA,UAAU,eAWlB,cAAC,EAAD,Q,eC5BOW,EAAa,aACbC,EAAc,cCWrBC,GAA8B,mBAC/BF,EAAa,KADkB,cAE/BC,EAAc,KAFiB,GAmBrBE,MAdf,WAA4D,IAA3CtB,EAA0C,uDAAlCqB,EAAcE,EAAoB,uCACnDC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU3B,IACzC,OAAQuB,EAAOK,MACX,KAAKT,EACDK,EAAQ,WAAeD,EAAOM,MAC9B,MACJ,KAAKT,EACDI,EAAQ,YAAgBD,EAAOM,MAKvC,OAAOL,GC1BIM,EADDC,YAAYT,GCK1BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOK,EAAjB,SACE,cAAC,EAAD,QAGJ9B,SAAS+B,eAAe,W","file":"static/js/main.94828f9a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FullscreenOutlined } from '@ant-design/icons';\r\nimport './index.css';\r\nexport class Fullscreen extends React.Component {\r\n    videoUrl = 'https://vip.bljiex.com';\r\n    componentDidMount() {\r\n    }\r\n    defaultStyle = {\r\n        width: '100%',\r\n        height: '500px',\r\n    }\r\n    fullStyle = {\r\n        ...this.defaultStyle,\r\n        with: '100%',\r\n        height: \"100%\",\r\n    }\r\n    state = {\r\n        iframeStyle: this.defaultStyle,\r\n    }\r\n\r\n    fullScreen = () => {\r\n        this.setState({ iframeStyle: this.fullStyle });\r\n        const element = document.querySelector('.container');\r\n        if (element) {\r\n            element.requestFullscreen();\r\n        }\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"container\">\r\n                <iframe src={this.videoUrl} {...this.state.iframeStyle}\r\n                    allowFullScreen\r\n                ></iframe>\r\n\r\n            </div>\r\n            <div>\r\n                <FullscreenOutlined style={{ cursor: \"pointer\" }}\r\n                    onClick={this.fullScreen}\r\n                />\r\n            </div>\r\n        </>\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Redux2 from './component/redux2';\nimport Redux1 from './component/redux1';\nimport ReactRedux1 from './component/react-redux1';\nimport ReactRedux2 from './component/react-redux2';\nimport FlexComponent from './component/flex';\nimport { Utils } from './utils/utils';\nimport { TestDefineStore1 } from './page/definedStore/test1';\nimport { TestDefineStore2 } from './page/definedStore/test2';\nimport { TestDefineStore3 } from './page/definedStore/test3';\nimport { Fullscreen } from './component/full-screen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Redux2></Redux2>\n        <Redux1></Redux1>\n        <hr />\n        <ReactRedux1></ReactRedux1>\n        <ReactRedux2></ReactRedux2> */}\n        {/* <FlexComponent></FlexComponent> */}\n        {/* <TestDefineStore1></TestDefineStore1>\n        <TestDefineStore2></TestDefineStore2>\n        <TestDefineStore3></TestDefineStore3> */}\n      </header>\n      <Fullscreen></Fullscreen>\n    </div>\n  );\n}\n\nexport default App;\n\n","export const REDUX_TEST = 'redux_test';\r\nexport const REDUX_TEST1 = 'redux_test1';","import { REDUX_TEST, REDUX_TEST1 } from \"./actionType\";\r\n\r\nexport interface ActionType {\r\n    type: string,\r\n    [key: string]: any,\r\n}\r\n\r\nexport interface StoreDeafultType {\r\n    [REDUX_TEST]: string,\r\n    [REDUX_TEST1]: string,\r\n}\r\n\r\nconst defaultState: StoreDeafultType = {\r\n    [REDUX_TEST]: '1',\r\n    [REDUX_TEST1]: '2',\r\n}\r\n\r\nfunction reducer(state = defaultState, action: ActionType) {\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n    switch (action.type) {\r\n        case REDUX_TEST:\r\n            newState[REDUX_TEST] = action.value;\r\n            break;\r\n        case REDUX_TEST1:\r\n            newState[REDUX_TEST1] = action.value;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return newState;\r\n}\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\nconst store = createStore(reducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport stroe from './store/index';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={stroe}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n"],"sourceRoot":""}