{"version":3,"sources":["component/full-screen/index.tsx","App.tsx","store/actionType.ts","store/reducer.ts","store/index.ts","index.tsx"],"names":["Fullscreen","videoUrl","defaultStyle","width","height","fullStyle","with","state","iframeStyle","fullScreen","setState","element","document","querySelector","requestFullscreen","className","src","this","allowFullScreen","FullscreenOutlined","style","cursor","onClick","React","Component","UserList","id","password","App","isLogin","Login","title","visible","onOk","handleOk","onCancel","editPassword","Item","label","name","onChange","editName","Password","openNotificationWithIcon","type","tips","notification","message","description","filter","item","length","window","sessionStorage","setItem","event","target","value","getItem","REDUX_TEST","REDUX_TEST1","defaultState","reducer","action","newState","JSON","parse","stringify","store","createStore","ReactDOM","render","StrictMode","stroe","getElementById"],"mappings":"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","file":"static/js/main.964a44d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FullscreenOutlined } from '@ant-design/icons';\r\nimport './index.css';\r\nexport class Fullscreen extends React.Component {\r\n    videoUrl = 'https://vip.bljiex.com';\r\n    componentDidMount() {\r\n    }\r\n    defaultStyle = {\r\n        width: '100%',\r\n        height: '500px',\r\n    }\r\n    fullStyle = {\r\n        ...this.defaultStyle,\r\n        with: '100%',\r\n        height: \"100%\",\r\n    }\r\n    state = {\r\n        iframeStyle: this.defaultStyle,\r\n    }\r\n\r\n    fullScreen = () => {\r\n        this.setState({ iframeStyle: this.fullStyle });\r\n        const element = document.querySelector('.container');\r\n        if (element) {\r\n            element.requestFullscreen();\r\n        }\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"container\">\r\n                <iframe src={this.videoUrl} {...this.state.iframeStyle}\r\n                    allowFullScreen\r\n                ></iframe>\r\n\r\n            </div>\r\n            <div>\r\n                <FullscreenOutlined style={{ cursor: \"pointer\" }}\r\n                    onClick={this.fullScreen}\r\n                />\r\n            </div>\r\n        </>\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Redux2 from './component/redux2';\nimport Redux1 from './component/redux1';\nimport ReactRedux1 from './component/react-redux1';\nimport ReactRedux2 from './component/react-redux2';\nimport FlexComponent from './component/flex';\nimport { Utils } from './utils/utils';\nimport { TestDefineStore1 } from './page/definedStore/test1';\nimport { TestDefineStore2 } from './page/definedStore/test2';\nimport { TestDefineStore3 } from './page/definedStore/test3';\nimport { Fullscreen } from './component/full-screen';\nimport Item from '_antd@4.16.11@antd/lib/list/Item';\nimport { Form, Input, Modal, notification } from '_antd@4.16.11@antd';\ntype User = {\n  id: string;\n  password: string;\n}\nconst UserList: User[] = [\n  {\n    id: '441074833',\n    password: '123',\n  }\n];\ntype StateType = {\n  id: string | null;\n  password: string;\n  isLogin: boolean;\n}\nclass App extends React.Component<{}, StateType> {\n  state = {\n    id: null,\n    password: '',\n    isLogin: false,\n  }\n  componentDidMount() {\n    const id = window.sessionStorage.getItem('id');\n    const password = window.sessionStorage.getItem('password');\n    const isLogin = !!(UserList.filter((item: User) => item.id === id && item.password === password).length);\n    this.setState({ isLogin });\n  }\n\n  Login = () => {\n    return <Modal title=\"login\" visible={!this.state.isLogin} onOk={this.handleOk} onCancel={this.editPassword}>\n      <Form.Item\n        label=\"Username\"\n        name=\"username\"\n      >\n        <Input onChange={this.editName} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n      >\n        <Input.Password onChange={this.editPassword} />\n      </Form.Item>\n    </Modal>\n  }\n  openNotificationWithIcon = (type: 'success' | 'error', tips: string) => {\n    notification[type]({\n      message: type,\n      description: tips,\n    });\n  };\n  handleOk = () => {\n    const { id, password } = this.state;\n    if (!id || !password) {\n      this.openNotificationWithIcon('error', 'Please check password or username');\n      return;\n    }\n    const isLogin = !!(UserList.filter((item: User) => item.id === id && item.password === password).length);\n    if (isLogin) {\n      this.openNotificationWithIcon('success', 'success');\n      window.sessionStorage.setItem('id', id || '');\n      window.sessionStorage.setItem('password', password || '');\n      const isLogin = true;\n      this.setState({ isLogin })\n    } else {\n      this.openNotificationWithIcon('error', 'Please check password or username');\n    }\n  }\n  editName = (event: any) => {\n    const id = event.target.value;\n    this.setState({ id })\n  }\n  editPassword = (event: any) => {\n    const password = event.target.value;\n    this.setState({ password })\n  }\n\n  render() {\n\n    return this.state.isLogin ? (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          {/* <Redux2></Redux2>\n        <Redux1></Redux1>\n        <hr />\n        <ReactRedux1></ReactRedux1>\n        <ReactRedux2></ReactRedux2> */}\n          {/* <FlexComponent></FlexComponent> */}\n          {/* <TestDefineStore1></TestDefineStore1>\n        <TestDefineStore2></TestDefineStore2>\n        <TestDefineStore3></TestDefineStore3> */}\n        </header>\n        <Fullscreen></Fullscreen>\n      </div>\n    ) : this.Login();\n  }\n}\n\nexport default App;\n\n","export const REDUX_TEST = 'redux_test';\r\nexport const REDUX_TEST1 = 'redux_test1';","import { REDUX_TEST, REDUX_TEST1 } from \"./actionType\";\r\n\r\nexport interface ActionType {\r\n    type: string,\r\n    [key: string]: any,\r\n}\r\n\r\nexport interface StoreDeafultType {\r\n    [REDUX_TEST]: string,\r\n    [REDUX_TEST1]: string,\r\n}\r\n\r\nconst defaultState: StoreDeafultType = {\r\n    [REDUX_TEST]: '1',\r\n    [REDUX_TEST1]: '2',\r\n}\r\n\r\nfunction reducer(state = defaultState, action: ActionType) {\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n    switch (action.type) {\r\n        case REDUX_TEST:\r\n            newState[REDUX_TEST] = action.value;\r\n            break;\r\n        case REDUX_TEST1:\r\n            newState[REDUX_TEST1] = action.value;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return newState;\r\n}\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\nconst store = createStore(reducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport stroe from './store/index';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={stroe}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n"],"sourceRoot":""}